import{_ as e,c as n,ai as s,o as t}from"./chunks/framework.CTvXDpzq.js";const u=JSON.parse('{"title":"Continuous Linear Motion","description":"","frontmatter":{"title":"Continuous Linear Motion"},"headers":[],"relativePath":"xarm_python_sdk/continuous_inear_motion.md","filePath":"en/xarm_python_sdk/continuous_inear_motion.md","lastUpdated":1732269888000}'),i={name:"xarm_python_sdk/continuous_inear_motion.md"};function o(r,a,p,l,d,c){return t(),n("div",null,a[0]||(a[0]=[s(`<h3 id="waiting" tabindex="-1">Waiting <a class="header-anchor" href="#waiting" aria-label="Permalink to &quot;Waiting&quot;">​</a></h3><p>In the <code>set_position()</code> interface for linear motion, the <code>wait</code> parameter is used to set whether to wait or not.</p><ul><li><code>wait=True</code> means that the next command to the robotic arm will be sent only after the current command is completed.</li><li><code>wait=False</code> means that after sending the current command, the next command will be sent immediately regardless of whether the robotic arm has completed its execution.</li></ul><p>For example, to make the robotic arm move to the following four points (A, B, C, D) at a speed of 200 mm/s without waiting between commands:</p><ul><li>Point A: <code>[300, 100, 150, 180, 0, 0]</code></li><li>Point B: <code>[300, -100, 150, 180, 0, 0]</code></li><li>Point C: <code>[400, -100, 150, 180, 0, 0]</code></li><li>Point D: <code>[400, 100, 150, 180, 0, 0]</code></li></ul><p>The complete code is as follows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>from xarm.wrapper import XArmAPI  </span></span>
<span class="line"><span>arm = XArmAPI(&#39;192.168.1.47&#39;)  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>arm.motion_enable(enable=True)  </span></span>
<span class="line"><span>arm.set_mode(0)  </span></span>
<span class="line"><span>arm.set_state(0)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>arm.set_position(300, 100, 150, 180, 0, 0, speed=200, wait=False)  </span></span>
<span class="line"><span>arm.set_position(300, -100, 150, 180, 0, 0, speed=200, wait=False)  </span></span>
<span class="line"><span>arm.set_position(400, -100, 150, 180, 0, 0, speed=200, wait=False)  </span></span>
<span class="line"><span>arm.set_position(400, 100, 150, 180, 0, 0, speed=200, wait=False)</span></span></code></pre></div><h3 id="blending-radius" tabindex="-1">Blending Radius <a class="header-anchor" href="#blending-radius" aria-label="Permalink to &quot;Blending Radius&quot;">​</a></h3><p>The blending radius is similar to the turning radius of a car. When a blending radius greater than 0 is set, the robotic arm&#39;s trajectory becomes smoother during turns. In the <code>set_position()</code> interface for linear motion, the blending radius is passed through the <code>radius</code> parameter. The <code>radius</code> parameter is only effective when <code>wait=False</code>, and its setting affects the continuity of the trajectory.</p><p>The table below shows the relationship between trajectory continuity and the <code>wait</code> and <code>radius</code> parameters:</p><table tabindex="0"><thead><tr><th>Parameter</th><th>radius &lt; 0</th><th>radius ≥ 0</th></tr></thead><tbody><tr><td>wait=True</td><td>Discontinuous</td><td>Discontinuous</td></tr><tr><td>wait=False</td><td>Discontinuous</td><td>Continuous</td></tr></tbody></table><p>Therefore, continuous linear motion can only be achieved when <code>wait=False</code> and <code>radius ≥ 0</code>.</p><h3 id="continuous-linear-motion" tabindex="-1">Continuous Linear Motion <a class="header-anchor" href="#continuous-linear-motion" aria-label="Permalink to &quot;Continuous Linear Motion&quot;">​</a></h3><p>The conditions required for continuous linear motion are:</p><ul><li>At least two Cartesian commands are needed.</li><li><code>wait=False</code></li><li><code>radius ≥ 0</code></li></ul><p>The following is an example of continuous linear motion with a blending radius of 5 mm:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>from xarm.wrapper import XArmAPI  </span></span>
<span class="line"><span>arm=XArmAPI(&#39;192.168.1.47&#39;)  </span></span>
<span class="line"><span>arm.motion_enable(enable=True)  </span></span>
<span class="line"><span>arm.set_mode(0)  </span></span>
<span class="line"><span>arm.set_state(0)  </span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>arm.set_position(300,100,150,180,0,0,speed=200,wait=False,radius=5)  </span></span>
<span class="line"><span>arm.set_position(300,-100,150,180,0,0,speed=200,wait=False,radius=5)  </span></span>
<span class="line"><span>arm.set_position(400,-100,150,180,0,0,speed=200,wait=False,radius=5)  </span></span>
<span class="line"><span>arm.set_position(400,100,150,180,0,0,speed=200,wait=False,radius=5)</span></span></code></pre></div>`,17)]))}const h=e(i,[["render",o]]);export{u as __pageData,h as default};
